"""
Django settings for Bookstore project.

Generated by 'django-admin startproject' using Django 4.0.10.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
from environs import Env    # new

env = Env()     # new
env.read_env()      # new

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY")   # new

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", default=False)   # new
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '0.0.0.0', '.herokuapp.com']     # new


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "django.contrib.sites", # new
    "whitenoise.runserver_nostatic",    # new
    # Third-party
    "crispy_forms", # new
    "crispy_bootstrap5", # new
    "allauth", # new
    "allauth.account", # new
    "debug_toolbar",    # new
    
    # Local
    "accounts.apps.AccountsConfig",
    "pages.apps.PagesConfig",
    "books.apps.BooksConfig",   
]

AUTH_USER_MODEL = 'accounts.CustomUser'

SITE_ID = 1     # django-allauth config

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend", # new
)

ACCOUNT_SESSION_REMEMBER = True     # new
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False     # new

ACCOUNT_USERNAME_REQUIRED = False   # new
ACCOUNT_AUTHENTICATION_METHOD = 'email'     # new
ACCOUNT_EMAIL_REQUIRED = True       # new
ACCOUNT_UNIQUE_EMAIL = True     # new
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'    # new

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"   # new
EMAIL_HOST = 'smtp-mail.outlook.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER") 
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = env.str("EMAIL_HOST_USER")

SECURE_SSL_REDIRECT = env.bool("DJANGO_SECURE_SSL_REDIRECT", default=True)

LOGIN_REDIRECT_URL = 'home'
ACCOUNT_LOGOUT_REDIRECT = 'home'    # new

MIDDLEWARE = [
    # 'django.middleware.cache.UpdateCacheMiddleware',    # 更新缓存
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',    # csrf中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # 防止点击劫持的中间件
    'debug_toolbar.middleware.DebugToolbarMiddleware',  # new
    # 'django.middleware.cache.FetchFromCacheMiddleware',     # 检查是否有缓存
    "whitenoise.middleware.WhiteNoiseMiddleware",   # new
]

# 使用本地缓存的设置
# CACHE_MIDDLEWARE_ALIAS = "default"      # 指定要使用的缓存后端
# CACHE_MIDDLEWARE_SECONDS = 604800       # 指定缓存的有效期,秒做单位,这是一周
# CACHE_MIDDLEWARE_KEY_PREFIX = ""        # 指定缓存键的前缀, 缓存键是用于唯一标识缓存对象的字符串

ROOT_URLCONF = 'Bookstore.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Bookstore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    "default": env.dj_db_url("DATABASE_URL",
    default="postgres://postgres@db/postgres")
}



# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]
STATIC_ROOT = str(BASE_DIR / "staticfiles")
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage" # new

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# django-crispy-forms
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"    # new
CRISPY_TEMPLATE_PACK = "bootstrap5"             # new

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

import socket       # 获取当前主机的主机名和 IP 地址
hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
# 调用socket.gethostbyname_ex()方法获取当前主机的主机名和 IP 地址列表
INTERNAL_IPS = [ip[:-1] + "1" for ip in ips]
# 遍历ips中的每个IP地址, 将每个IP地址的最后一部分替换为"1"


REDIS_HOST = "redis"    # 这里要和compose里服务名称一致
REDIS_PORT = 6379
REDIS_PASSWORD = None

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
            "PASSWORD": REDIS_PASSWORD,
        }
    }
}

# django_heroku.settings(locals())

SECURE_HSTS_SECONDS = env.int("DJANGO_SECURE_HSTS_SECONDS", default=2592000) # 30 days
SECURE_HSTS_INCLUDE_SUBDOMAINS = env.bool("DJANGO_SECURE_HSTS_INCLUDE_SUBDOMAINS", default=True)
SECURE_HSTS_PRELOAD = env.bool("DJANGO_SECURE_HSTS_PRELOAD", default=True)

SESSION_COOKIE_SECURE = env.bool("DJANGO_SESSION_COOKIE_SECURE", default=True)
CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", default=True)

# settings.py

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}
